# Generated by Django 4.2.7 on 2025-08-03 09:14

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "website",
                    models.URLField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.URLValidator()],
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("industry", models.CharField(blank=True, max_length=255, null=True)),
                ("sector", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "employee_count",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("employee_count_exact", models.IntegerField(blank=True, null=True)),
                (
                    "headquarters_location",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("founded_year", models.IntegerField(blank=True, null=True)),
                ("ipo_status", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "total_funding",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("valuation", models.CharField(blank=True, max_length=100, null=True)),
                ("revenue", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "revenue_growth",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("business_model", models.TextField(blank=True, null=True)),
                ("key_products", models.JSONField(blank=True, default=list)),
                ("key_technologies", models.JSONField(blank=True, default=list)),
                ("competitors", models.JSONField(blank=True, default=list)),
                ("ai_ml_usage", models.TextField(blank=True, null=True)),
                ("current_ai_infrastructure", models.TextField(blank=True, null=True)),
                ("ai_initiatives", models.JSONField(blank=True, default=list)),
                ("ml_use_cases", models.JSONField(blank=True, default=list)),
                (
                    "data_science_team_size",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("ai_inference_workloads", models.JSONField(blank=True, default=list)),
                ("inference_models_used", models.JSONField(blank=True, default=list)),
                (
                    "inference_volume",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "inference_latency_requirements",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("current_inference_hardware", models.TextField(blank=True, null=True)),
                ("inference_pain_points", models.JSONField(blank=True, default=list)),
                (
                    "inference_budget",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "recommended_cerebras_product",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("cerebras_fit_score", models.IntegerField(blank=True, null=True)),
                ("cerebras_value_proposition", models.TextField(blank=True, null=True)),
                ("potential_use_cases", models.JSONField(blank=True, default=list)),
                (
                    "implementation_timeline",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "estimated_budget_range",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("research_last_updated", models.DateTimeField(auto_now_add=True)),
                ("research_quality_score", models.IntegerField(default=0)),
                ("research_sources", models.JSONField(blank=True, default=list)),
                ("research_notes", models.TextField(blank=True, null=True)),
                (
                    "outreach_priority",
                    models.CharField(
                        choices=[
                            ("high", "High"),
                            ("medium", "Medium"),
                            ("low", "Low"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                ("contact_attempted", models.BooleanField(default=False)),
                ("last_contact_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "companies",
                "ordering": ["-research_quality_score", "-cerebras_fit_score", "name"],
            },
        ),
        migrations.CreateModel(
            name="Report",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("company", "Company Report"),
                            ("comprehensive", "Comprehensive Report"),
                        ],
                        default="company",
                        max_length=20,
                    ),
                ),
                (
                    "content",
                    models.TextField(help_text="Report content in Markdown format"),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional report metadata"
                    ),
                ),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                ("last_edited_at", models.DateTimeField(auto_now=True)),
                (
                    "is_edited",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the report has been manually edited",
                    ),
                ),
                ("is_archived", models.BooleanField(default=False)),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        help_text="Company this report is for (null for comprehensive reports)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reports",
                        to="companies.company",
                    ),
                ),
            ],
            options={
                "db_table": "reports",
                "ordering": ["-generated_at"],
            },
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("full_name", models.CharField(blank=True, max_length=255, null=True)),
                ("title", models.CharField(blank=True, max_length=255, null=True)),
                ("department", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "seniority_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("c_level", "C-Level"),
                            ("vp", "Vice President"),
                            ("director", "Director"),
                            ("manager", "Manager"),
                            ("senior", "Senior"),
                            ("mid", "Mid-Level"),
                            ("junior", "Junior"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=50, null=True)),
                ("linkedin_url", models.URLField(blank=True, null=True)),
                (
                    "twitter_handle",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "tenure_at_company",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "previous_companies",
                    models.JSONField(blank=True, default=list, null=True),
                ),
                ("education", models.JSONField(blank=True, default=list, null=True)),
                (
                    "certifications",
                    models.JSONField(blank=True, default=list, null=True),
                ),
                ("decision_maker", models.BooleanField(default=False)),
                (
                    "influence_level",
                    models.CharField(
                        choices=[
                            ("high", "High"),
                            ("medium", "Medium"),
                            ("low", "Low"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        max_length=20,
                    ),
                ),
                ("budget_authority", models.BooleanField(default=False)),
                ("technical_background", models.BooleanField(default=False)),
                ("ai_ml_experience", models.TextField(blank=True, null=True)),
                (
                    "ai_ml_interests",
                    models.JSONField(blank=True, default=list, null=True),
                ),
                (
                    "published_papers",
                    models.JSONField(blank=True, default=list, null=True),
                ),
                (
                    "conference_speaking",
                    models.JSONField(blank=True, default=list, null=True),
                ),
                (
                    "communication_style",
                    models.CharField(
                        choices=[
                            ("technical", "Technical"),
                            ("business", "Business-focused"),
                            ("mixed", "Mixed"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        max_length=20,
                    ),
                ),
                ("interests", models.JSONField(blank=True, default=list, null=True)),
                ("pain_points", models.JSONField(blank=True, default=list, null=True)),
                (
                    "recent_achievements",
                    models.JSONField(blank=True, default=list, null=True),
                ),
                (
                    "contact_priority",
                    models.CharField(
                        choices=[
                            ("primary", "Primary Contact"),
                            ("secondary", "Secondary Contact"),
                            ("tertiary", "Tertiary Contact"),
                        ],
                        default="secondary",
                        max_length=20,
                    ),
                ),
                ("last_contacted", models.DateTimeField(blank=True, null=True)),
                ("response_rate", models.FloatField(default=0.0)),
                (
                    "preferred_contact_method",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("linkedin", "LinkedIn"),
                            ("phone", "Phone"),
                            ("unknown", "Unknown"),
                        ],
                        default="email",
                        max_length=20,
                    ),
                ),
                ("research_last_updated", models.DateTimeField(auto_now_add=True)),
                ("research_quality_score", models.IntegerField(default=0)),
                ("data_sources", models.JSONField(blank=True, default=list, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contacts",
                        to="companies.company",
                    ),
                ),
            ],
            options={
                "db_table": "contacts",
                "ordering": [
                    "contact_priority",
                    "-influence_level",
                    "last_name",
                    "first_name",
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="report",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_archived", False), ("report_type", "company")),
                fields=("company", "report_type"),
                name="unique_company_report",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="contact",
            unique_together={("company", "email")},
        ),
    ]
